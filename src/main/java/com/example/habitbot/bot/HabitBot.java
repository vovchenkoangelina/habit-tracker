package com.example.habitbot.bot;

import com.example.habitbot.model.Habit;
import com.example.habitbot.service.HabitService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class HabitBot extends TelegramLongPollingBot {

    private final HabitService habitService;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    private final Map<Long, UserState> userStates = new HashMap<>();

    private enum UserState {
        WAITING_FOR_HABIT_NAME
    }

    public HabitBot(HabitService habitService) {
        this.habitService = habitService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasCallbackQuery()) {
                handleCallback(update);
            } else if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update.getMessage());
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) throws TelegramApiException {
        String text = message.getText();
        long chatId = message.getChatId();

        if (userStates.get(chatId) == UserState.WAITING_FOR_HABIT_NAME) {
            Habit habit = habitService.addHabit(text, chatId);
            sendMessage(chatId, "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + habit.getTitle());
            userStates.remove(chatId);
            return;
        }

        switch (text) {
            case "/start" -> {
                sendMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.");
                sendMenu(chatId);
            }
            case "/menu" -> sendMenu(chatId);
            case "/listhabits" -> sendHabitsList(chatId);
            default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.");
        }
    }

    private void handleCallback(Update update) throws TelegramApiException {
        String data = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        switch (data) {
            case "add" -> {
                sendMessage(chatId, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:");
                userStates.put(chatId, UserState.WAITING_FOR_HABIT_NAME);
            }
            case "list" -> sendHabitsList(chatId);
            case "done_menu" -> sendDoneMenu(chatId);
            default -> {
                if (data.startsWith("done_")) {
                    Long habitId = Long.parseLong(data.replace("done_", ""));
                    Habit habit = habitService.markHabitDone(habitId, chatId);
                    sendMessage(chatId, "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞: " + habit.getTitle() +
                            " (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: " + habit.getCompletionCount() + ")");
                } else {
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
                }
            }
        }
    }

    private void sendHabitsList(long chatId) throws TelegramApiException {
        var habits = habitService.listHabits(chatId);
        if (habits.isEmpty()) {
            sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø—É—Å—Ç.");
        } else {
            StringBuilder sb = new StringBuilder("üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n");
            for (Habit h : habits) {
                sb.append(h.getId()).append(". ").append(h.getTitle())
                        .append(" (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: ").append(h.getCompletionCount()).append(")\n");
            }
            sendMessage(chatId, sb.toString());
        }
    }

    private void sendMenu(long chatId) throws TelegramApiException {
        InlineKeyboardButton addBtn = new InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É");
        addBtn.setCallbackData("add");

        InlineKeyboardButton listBtn = new InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫");
        listBtn.setCallbackData("list");

        InlineKeyboardButton doneBtn = new InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É");
        doneBtn.setCallbackData("done_menu");

        List<List<InlineKeyboardButton>> rows = List.of(
                List.of(addBtn, listBtn),
                List.of(doneBtn)
        );
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(markup);

        execute(message);
    }

    private void sendDoneMenu(long chatId) throws TelegramApiException {
        var habits = habitService.listHabits(chatId);
        if (habits.isEmpty()) {
            sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø—É—Å—Ç.");
            return;
        }

        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        for (Habit h : habits) {
            InlineKeyboardButton btn = new InlineKeyboardButton(h.getTitle());
            btn.setCallbackData("done_" + h.getId());
            rows.add(List.of(btn));
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:");
        message.setReplyMarkup(markup);

        execute(message);
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        execute(message);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}

